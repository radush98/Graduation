from aes import AESModeOfOperationCTR
from Cryptodome.Random import get_random_bytes
import os
from tkinter import filedialog as fd
from tkinter import *
from tkinter import messagebox as mb


class myAES:
    # def __init__(self, key):
    def __init__(self):
        # self.iv = get_random_bytes(16)
        # self.key = self.checkKey(key)
        self.key = '11111111111111111111111111111111'.encode()
        self.BUF_SIZE = 16

    # def checkKey(self,key):
        # key = bytes(key.encode())
        # if len(key) < 32:
        #     key= key + get_random_bytes(32-len(key))
        #     mb.showinfo('Warning!', 'Your key was too short and the missed part was generated by programm!')
        #     self.writeKey(key)

        # if len(key) > 32:
        #     key = key[0:32]
        #     mb.showinfo('Warning!', 'Your key was too long and the extra part was deleted by programm!')
        #     self.writeKey(key)

    # def writeKey(self,key):
    #     mb.showinfo('Select directory', 'Select directory to store your key!')
    #     with open(fd.askdirectory() + '\key.txt', 'wb') as f:
    #         f.write(key)

    def encrypt(self):
        mb.showinfo('File', 'Select file to ecnrypt!')
        AES = AESModeOfOperationCTR(self.key)
        path = fd.askopenfilename()
        with open(path, 'rb') as f, open(path+'.enc', 'wb') as f1:
            while True:
                data = f.read(self.BUF_SIZE)
                if not data:
                    break
                ciphertext = AES.encrypt(data)
                f1.write(ciphertext)
        os.remove(path)
        mb.showinfo('Success!', 'Encrypted successfully!')

    def decrypt(self):
        mb.showinfo('File', 'Select file to decrypt!')
        AES = AESModeOfOperationCTR(self.key)
        path = fd.askopenfilename()
        with open(path, 'rb') as f, open(path[:-4], 'wb') as f1:
            while True:
                data = f.read(self.BUF_SIZE)
                if not data:
                    break
                ciphertext = AES.decrypt(data)
                f1.write(ciphertext)
        os.remove(path)
        mb.showinfo('Success!', 'Decrypted successfully!')


cipher = None


def encrypt():
    global cipher
    # cipher = myAES(key.get())
    cipher = myAES()
    cipher.encrypt()


def decrypt():
    global cipher
    if cipher != None:
        cipher.decrypt()
    else:
        mb.showinfo('There is no decrypted files! Encrypt some files first!')


root = Tk()

# l1 = Label(text='Key:')
# l1.pack()

# key = Entry()
# key.pack()

encr = Button(text="Encrypt", command=encrypt)
encr.pack()

decr = Button(text="Decrypt", command=decrypt)
decr.pack()

root.mainloop()
